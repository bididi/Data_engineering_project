[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\viann\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\viann\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 74.9501ms
[debug]       Load.loadUnit: defsScala took 0.2289ms
[debug] [Loading] Scanning directory C:\Users\viann\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\viann\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.149 ms
[debug]           Load.resolveProject(global-plugins) took 34.7622ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\viann\.sbt\1.0\plugins, plugins: List(<none>))) took 72.7411ms
[debug] [Loading] Done in C:\Users\viann\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 87.0879ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1715ms
[debug]     Load.loadUnit(file:/C:/Users/viann/.sbt/1.0/plugins/, ...) took 167.5663ms
[debug]   Load.apply: load took 277.1104ms
[debug]   Load.apply: resolveProjects took 4.313ms
[debug]   Load.apply: finalTransforms took 39.0939ms
[debug]   Load.apply: config.delegates took 5.6358ms
[debug]   Load.apply: Def.make(settings)... took 650.1476ms
[debug]   Load.apply: structureIndex took 73.1107ms
[debug]   Load.apply: mkStreams took 1.6344ms
[info] loading global plugins from C:\Users\viann\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2634.8395ms
[debug]           Load.loadUnit: plugins took 32.7521ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt\project
[debug]             Load.loadUnit: mkEval took 9.5849ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5843 ms
[info] loading settings for project peaceland_pjt-build from idea.sbt ...
[debug]               Load.resolveProject(peaceland_pjt-build) took 3.6701ms
[debug]             Load.loadTransitive: finalizeProject(Project(id peaceland_pjt-build, base: C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt\project, plugins: List(<none>))) took 5.7099ms
[debug] [Loading] Done in C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt\project, returning: (peaceland_pjt-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2203.972ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.8221ms
[debug]         Load.loadUnit(file:/C:/Users/viann/OneDrive%20-%20Efrei/M1/S8/Data-engineering/Peaceland_pjt/project/, ...) took 2241.9514ms
[debug]       Load.apply: load took 2243.3802ms
[debug]       Load.apply: resolveProjects took 0.074ms
[debug]       Load.apply: finalTransforms took 6.3725ms
[debug]       Load.apply: config.delegates took 0.3166ms
[debug]       Load.apply: Def.make(settings)... took 68.034ms
[debug]       Load.apply: structureIndex took 22.4498ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3198.9346ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt
[debug]       Load.loadUnit: mkEval took 0.2615ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2356 ms
[info] loading settings for project peaceland_pjt from build.sbt ...
[debug]         Load.resolveProject(peaceland_pjt) took 25.929ms
[debug]       Load.loadTransitive: finalizeProject(Project(id peaceland_pjt, base: C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt, plugins: List(<none>))) took 29.3158ms
[debug] [Loading] Done in C:\Users\viann\OneDrive - Efrei\M1\S8\Data-engineering\Peaceland_pjt, returning: (peaceland_pjt)
[debug]     Load.loadUnit: loadedProjectsRaw took 677.1119ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.9282ms
[debug]   Load.loadUnit(file:/C:/Users/viann/OneDrive%20-%20Efrei/M1/S8/Data-engineering/Peaceland_pjt/, ...) took 3887.6226ms
[debug] Load.apply: load took 3889.7147ms
[debug] Load.apply: resolveProjects took 0.1358ms
[debug] Load.apply: finalTransforms took 23.9115ms
[debug] Load.apply: config.delegates took 0.4451ms
[debug] Load.apply: Def.make(settings)... took 51.4192ms
[debug] Load.apply: structureIndex took 16.6404ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to Peaceland_pjt (in build file:/C:/Users/viann/OneDrive%20-%20Efrei/M1/S8/Data-engineering/Peaceland_pjt/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52040 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52040, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Peaceland_pjt (in build file:/C:/Users/viann/OneDrive%20-%20Efrei/M1/S8/Data-engineering/Peaceland_pjt/)
[debug] > Exec(idea-shell, None, None)
